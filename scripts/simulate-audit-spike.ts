#!/usr/bin/env tsx
import 'dotenv/config'

import { drizzle } from 'drizzle-orm/node-postgres'
import { InferInsertModel } from 'drizzle-orm'
import { Pool } from 'pg'

import { aiAuditLogs } from '../lib/db/schema'

function getArg(name: string, fallback?: string) {
  const prefix = `--${name}=`
  const match = process.argv.find((arg) => arg.startsWith(prefix))
  if (match) {
    return match.slice(prefix.length)
  }
  return fallback
}

const count = Number(getArg('count', '50'))
if (Number.isNaN(count) || count <= 0) {
  throw new Error('--count must be a positive integer')
}

const workflowId = Number(getArg('workflow-id', '1'))
if (Number.isNaN(workflowId) || workflowId <= 0) {
  throw new Error('--workflow-id must be a positive integer')
}

const capability = getArg('capability', 'synthetic_spike_test') ?? 'synthetic_spike_test'
const provider = getArg('provider', 'openai') ?? 'openai'
const windowMinutes = Number(getArg('window-minutes', '15'))
if (Number.isNaN(windowMinutes) || windowMinutes <= 0) {
  throw new Error('--window-minutes must be a positive integer')
}

async function main() {
  const databaseUrl = process.env.DATABASE_URL || process.env.POSTGRES_URL
  if (!databaseUrl) {
    throw new Error('DATABASE_URL or POSTGRES_URL must be configured')
  }

  const pool = new Pool({ connectionString: databaseUrl })
  const db = drizzle(pool)

  try {
    const now = Date.now()
    const start = now - windowMinutes * 60 * 1000

    const rows: InferInsertModel<typeof aiAuditLogs>[] = Array.from({ length: count }).map((_, index) => {
      const timestamp = new Date(start + ((index + 1) / count) * windowMinutes * 60 * 1000)
      return {
        workflowId,
        capability,
        provider,
        prompt: {
          synthetic: true,
          scenario: 'alert-spike-test'
        },
        response: {
          synthetic: true,
          detail: 'Generated by simulate-audit-spike script'
        },
        verification: {
          synthetic: true,
          note: 'Safe to delete after test'
        },
        createdAt: timestamp
      }
    })

    const inserted = await db.insert(aiAuditLogs).values(rows).returning({ id: aiAuditLogs.id, createdAt: aiAuditLogs.createdAt })

    console.log('[simulate-audit-spike] inserted records', {
      count: inserted.length,
      capability,
      provider,
      workflowId,
      windowMinutes,
      firstCreatedAt: inserted[0]?.createdAt,
      lastCreatedAt: inserted[inserted.length - 1]?.createdAt
    })
    console.log('[simulate-audit-spike] run `npm run sync:ai-audit-logs` to push data to the warehouse')
  } finally {
    await db.$client.end()
    await pool.end()
  }
}

main().catch((error) => {
  console.error('[simulate-audit-spike] failed', error)
  process.exitCode = 1
})
